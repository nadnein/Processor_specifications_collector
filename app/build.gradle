/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'java'
    
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    main.resources.srcDir('src/resources')
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation libs.groovy.all

    // This dependency is used by the application.
    implementation libs.guava

    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.18.3'

    // DataFrames
    implementation platform('org.dflib:dflib-bom:1.2.0')
    implementation 'org.dflib:dflib'
    implementation 'org.dflib:dflib-csv'
    
    // Progressbar
    implementation   'me.tongfei:progressbar:0.10.0'

    // Selenium web scraping
    implementation 'org.seleniumhq.selenium:selenium-java:4.29.0'
    implementation 'org.junit.jupiter:junit-jupiter-engine:5.11.4'


    // Use the awesome Spock testing and specification framework even with Java
    testImplementation libs.spock.core
    testImplementation libs.junit

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.cpuinfofetcher.Main'
}

javadoc {
    destinationDir = file("${buildDir}/docs/javadoc")
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

tasks.register("downloadJavadoc") {
    doLast {
        configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (artifact.name.contains("javadoc")) {
                println("Javadoc available: ${artifact.file}")
            }
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
